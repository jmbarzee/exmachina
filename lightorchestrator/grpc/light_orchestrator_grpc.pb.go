// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LightOrchestratorClient is the client API for LightOrchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightOrchestratorClient interface {
	// SubscribeLights requests a stream of lights
	SubscribeLights(ctx context.Context, in *SubscribeLightsRequest, opts ...grpc.CallOption) (LightOrchestrator_SubscribeLightsClient, error)
	// GetDevices returns the DeviceNode hierarchy and all subscribed devices
	GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDevicesReply, error)
	// MoveDevice changes a devices location and orientation
	MoveDevice(ctx context.Context, in *MoveDeviceRequest, opts ...grpc.CallOption) (*Empty, error)
	// InsertNode inserts a node into the NodeTree
	InsertNode(ctx context.Context, in *InsertNodeRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeleteNode deletes a node from the NodeTree
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type lightOrchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewLightOrchestratorClient(cc grpc.ClientConnInterface) LightOrchestratorClient {
	return &lightOrchestratorClient{cc}
}

func (c *lightOrchestratorClient) SubscribeLights(ctx context.Context, in *SubscribeLightsRequest, opts ...grpc.CallOption) (LightOrchestrator_SubscribeLightsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LightOrchestrator_ServiceDesc.Streams[0], "/grpc.LightOrchestrator/SubscribeLights", opts...)
	if err != nil {
		return nil, err
	}
	x := &lightOrchestratorSubscribeLightsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LightOrchestrator_SubscribeLightsClient interface {
	Recv() (*SubscribeLightsReply, error)
	grpc.ClientStream
}

type lightOrchestratorSubscribeLightsClient struct {
	grpc.ClientStream
}

func (x *lightOrchestratorSubscribeLightsClient) Recv() (*SubscribeLightsReply, error) {
	m := new(SubscribeLightsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lightOrchestratorClient) GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDevicesReply, error) {
	out := new(GetDevicesReply)
	err := c.cc.Invoke(ctx, "/grpc.LightOrchestrator/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightOrchestratorClient) MoveDevice(ctx context.Context, in *MoveDeviceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.LightOrchestrator/MoveDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightOrchestratorClient) InsertNode(ctx context.Context, in *InsertNodeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.LightOrchestrator/InsertNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightOrchestratorClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.LightOrchestrator/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightOrchestratorServer is the server API for LightOrchestrator service.
// All implementations must embed UnimplementedLightOrchestratorServer
// for forward compatibility
type LightOrchestratorServer interface {
	// SubscribeLights requests a stream of lights
	SubscribeLights(*SubscribeLightsRequest, LightOrchestrator_SubscribeLightsServer) error
	// GetDevices returns the DeviceNode hierarchy and all subscribed devices
	GetDevices(context.Context, *Empty) (*GetDevicesReply, error)
	// MoveDevice changes a devices location and orientation
	MoveDevice(context.Context, *MoveDeviceRequest) (*Empty, error)
	// InsertNode inserts a node into the NodeTree
	InsertNode(context.Context, *InsertNodeRequest) (*Empty, error)
	// DeleteNode deletes a node from the NodeTree
	DeleteNode(context.Context, *DeleteNodeRequest) (*Empty, error)
	mustEmbedUnimplementedLightOrchestratorServer()
}

// UnimplementedLightOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedLightOrchestratorServer struct {
}

func (UnimplementedLightOrchestratorServer) SubscribeLights(*SubscribeLightsRequest, LightOrchestrator_SubscribeLightsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLights not implemented")
}
func (UnimplementedLightOrchestratorServer) GetDevices(context.Context, *Empty) (*GetDevicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedLightOrchestratorServer) MoveDevice(context.Context, *MoveDeviceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveDevice not implemented")
}
func (UnimplementedLightOrchestratorServer) InsertNode(context.Context, *InsertNodeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNode not implemented")
}
func (UnimplementedLightOrchestratorServer) DeleteNode(context.Context, *DeleteNodeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedLightOrchestratorServer) mustEmbedUnimplementedLightOrchestratorServer() {}

// UnsafeLightOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightOrchestratorServer will
// result in compilation errors.
type UnsafeLightOrchestratorServer interface {
	mustEmbedUnimplementedLightOrchestratorServer()
}

func RegisterLightOrchestratorServer(s grpc.ServiceRegistrar, srv LightOrchestratorServer) {
	s.RegisterService(&LightOrchestrator_ServiceDesc, srv)
}

func _LightOrchestrator_SubscribeLights_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLightsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LightOrchestratorServer).SubscribeLights(m, &lightOrchestratorSubscribeLightsServer{stream})
}

type LightOrchestrator_SubscribeLightsServer interface {
	Send(*SubscribeLightsReply) error
	grpc.ServerStream
}

type lightOrchestratorSubscribeLightsServer struct {
	grpc.ServerStream
}

func (x *lightOrchestratorSubscribeLightsServer) Send(m *SubscribeLightsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _LightOrchestrator_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightOrchestratorServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.LightOrchestrator/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightOrchestratorServer).GetDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightOrchestrator_MoveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightOrchestratorServer).MoveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.LightOrchestrator/MoveDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightOrchestratorServer).MoveDevice(ctx, req.(*MoveDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightOrchestrator_InsertNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightOrchestratorServer).InsertNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.LightOrchestrator/InsertNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightOrchestratorServer).InsertNode(ctx, req.(*InsertNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightOrchestrator_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightOrchestratorServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.LightOrchestrator/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightOrchestratorServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LightOrchestrator_ServiceDesc is the grpc.ServiceDesc for LightOrchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LightOrchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.LightOrchestrator",
	HandlerType: (*LightOrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _LightOrchestrator_GetDevices_Handler,
		},
		{
			MethodName: "MoveDevice",
			Handler:    _LightOrchestrator_MoveDevice_Handler,
		},
		{
			MethodName: "InsertNode",
			Handler:    _LightOrchestrator_InsertNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _LightOrchestrator_DeleteNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeLights",
			Handler:       _LightOrchestrator_SubscribeLights_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "light_orchestrator.proto",
}
