// Code generated by protoc-gen-go. DO NOT EDIT.
// source: light_orchestrator.proto

package grpcdomain

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SubscribeLightsRequest contains the identifying information from the subscriber
type SubscribeLightsRequest struct {
	// Type is the Type of the Subscriber
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// UUID is a Unique Identifier for the Subscriber
	UUID                 string   `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeLightsRequest) Reset()         { *m = SubscribeLightsRequest{} }
func (m *SubscribeLightsRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeLightsRequest) ProtoMessage()    {}
func (*SubscribeLightsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{0}
}

func (m *SubscribeLightsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeLightsRequest.Unmarshal(m, b)
}
func (m *SubscribeLightsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeLightsRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeLightsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeLightsRequest.Merge(m, src)
}
func (m *SubscribeLightsRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeLightsRequest.Size(m)
}
func (m *SubscribeLightsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeLightsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeLightsRequest proto.InternalMessageInfo

func (m *SubscribeLightsRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SubscribeLightsRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

// SubscribeLightsReply contains the time and series of RGBA colors which should be displayed
type SubscribeLightsReply struct {
	// DisplayTime is the time which the lights should be applied
	DisplayTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=DisplayTime,proto3" json:"DisplayTime,omitempty"`
	// Colors are the series of colors which should be displayed
	Colors               []uint32 `protobuf:"varint,2,rep,packed,name=Colors,proto3" json:"Colors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeLightsReply) Reset()         { *m = SubscribeLightsReply{} }
func (m *SubscribeLightsReply) String() string { return proto.CompactTextString(m) }
func (*SubscribeLightsReply) ProtoMessage()    {}
func (*SubscribeLightsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{1}
}

func (m *SubscribeLightsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeLightsReply.Unmarshal(m, b)
}
func (m *SubscribeLightsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeLightsReply.Marshal(b, m, deterministic)
}
func (m *SubscribeLightsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeLightsReply.Merge(m, src)
}
func (m *SubscribeLightsReply) XXX_Size() int {
	return xxx_messageInfo_SubscribeLightsReply.Size(m)
}
func (m *SubscribeLightsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeLightsReply.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeLightsReply proto.InternalMessageInfo

func (m *SubscribeLightsReply) GetDisplayTime() *timestamp.Timestamp {
	if m != nil {
		return m.DisplayTime
	}
	return nil
}

func (m *SubscribeLightsReply) GetColors() []uint32 {
	if m != nil {
		return m.Colors
	}
	return nil
}

// GetDevicesReply contains the DeviceNode hierarchy and all subscribed devices
type GetDevicesReply struct {
	// DeviceNodeTree is DeviceNode hierarchy
	DeviceNodeTree *Node `protobuf:"bytes,1,opt,name=DeviceNodeTree,proto3" json:"DeviceNodeTree,omitempty"`
	// Devices is the list of subscribed devices
	Devices              []*Device `protobuf:"bytes,2,rep,name=Devices,proto3" json:"Devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetDevicesReply) Reset()         { *m = GetDevicesReply{} }
func (m *GetDevicesReply) String() string { return proto.CompactTextString(m) }
func (*GetDevicesReply) ProtoMessage()    {}
func (*GetDevicesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{2}
}

func (m *GetDevicesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDevicesReply.Unmarshal(m, b)
}
func (m *GetDevicesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDevicesReply.Marshal(b, m, deterministic)
}
func (m *GetDevicesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDevicesReply.Merge(m, src)
}
func (m *GetDevicesReply) XXX_Size() int {
	return xxx_messageInfo_GetDevicesReply.Size(m)
}
func (m *GetDevicesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDevicesReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetDevicesReply proto.InternalMessageInfo

func (m *GetDevicesReply) GetDeviceNodeTree() *Node {
	if m != nil {
		return m.DeviceNodeTree
	}
	return nil
}

func (m *GetDevicesReply) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

// MoveDeviceRequest contains the new position and orientation
type MoveDeviceRequest struct {
	// Device contians the UUID and type of the device to help find the device to move
	// the Location and Orientation are where the device should be moved to
	Device               *Device  `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveDeviceRequest) Reset()         { *m = MoveDeviceRequest{} }
func (m *MoveDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*MoveDeviceRequest) ProtoMessage()    {}
func (*MoveDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{3}
}

func (m *MoveDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveDeviceRequest.Unmarshal(m, b)
}
func (m *MoveDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveDeviceRequest.Marshal(b, m, deterministic)
}
func (m *MoveDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveDeviceRequest.Merge(m, src)
}
func (m *MoveDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_MoveDeviceRequest.Size(m)
}
func (m *MoveDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoveDeviceRequest proto.InternalMessageInfo

func (m *MoveDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

// InsertNodeRequest contains the UUID of the parent and the child
type InsertNodeRequest struct {
	// ParentUUID is the UUID of the parent for the new child
	ParentUUID string `protobuf:"bytes,1,opt,name=ParentUUID,proto3" json:"ParentUUID,omitempty"`
	// ChildUUID is the UUID of the new child
	ChildUUID            string   `protobuf:"bytes,2,opt,name=ChildUUID,proto3" json:"ChildUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertNodeRequest) Reset()         { *m = InsertNodeRequest{} }
func (m *InsertNodeRequest) String() string { return proto.CompactTextString(m) }
func (*InsertNodeRequest) ProtoMessage()    {}
func (*InsertNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{4}
}

func (m *InsertNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertNodeRequest.Unmarshal(m, b)
}
func (m *InsertNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertNodeRequest.Marshal(b, m, deterministic)
}
func (m *InsertNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertNodeRequest.Merge(m, src)
}
func (m *InsertNodeRequest) XXX_Size() int {
	return xxx_messageInfo_InsertNodeRequest.Size(m)
}
func (m *InsertNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InsertNodeRequest proto.InternalMessageInfo

func (m *InsertNodeRequest) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *InsertNodeRequest) GetChildUUID() string {
	if m != nil {
		return m.ChildUUID
	}
	return ""
}

// DeleteNodeRequest contains the UUID of the parent and the child
type DeleteNodeRequest struct {
	// ParentUUID is the UUID of the parent for the new child
	ParentUUID string `protobuf:"bytes,1,opt,name=ParentUUID,proto3" json:"ParentUUID,omitempty"`
	// ChildUUID is the UUID of the new child
	ChildUUID            string   `protobuf:"bytes,2,opt,name=ChildUUID,proto3" json:"ChildUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNodeRequest) Reset()         { *m = DeleteNodeRequest{} }
func (m *DeleteNodeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeRequest) ProtoMessage()    {}
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{5}
}

func (m *DeleteNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNodeRequest.Unmarshal(m, b)
}
func (m *DeleteNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNodeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNodeRequest.Merge(m, src)
}
func (m *DeleteNodeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteNodeRequest.Size(m)
}
func (m *DeleteNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNodeRequest proto.InternalMessageInfo

func (m *DeleteNodeRequest) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *DeleteNodeRequest) GetChildUUID() string {
	if m != nil {
		return m.ChildUUID
	}
	return ""
}

// DeviceNNodeode represents a Node in the Node hierarchy
type Node struct {
	// UUID is the UUID of the Node
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Type is the Type of the Node
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Children are the Children of the Node
	Children             []*Node  `protobuf:"bytes,3,rep,name=Children,proto3" json:"Children,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{6}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Node) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Node) GetChildren() []*Node {
	if m != nil {
		return m.Children
	}
	return nil
}

// Device represents a subscriber in the list of subscribers
type Device struct {
	// UUID is the UUID of the Device
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Type is the Type of the Device
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Location is the Location of the Device
	Location *Cartesian `protobuf:"bytes,3,opt,name=Location,proto3" json:"Location,omitempty"`
	// Orientation is the Orientation of the Device
	Orientation *Spherical `protobuf:"bytes,4,opt,name=Orientation,proto3" json:"Orientation,omitempty"`
	// Rotation is the Rotation of the Device
	Rotation *Spherical `protobuf:"bytes,5,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	// Nodes is an array of the nodes which the
	Nodes                []*Node  `protobuf:"bytes,6,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{7}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Device) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device) GetLocation() *Cartesian {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Device) GetOrientation() *Spherical {
	if m != nil {
		return m.Orientation
	}
	return nil
}

func (m *Device) GetRotation() *Spherical {
	if m != nil {
		return m.Rotation
	}
	return nil
}

func (m *Device) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// Spherical represents a location in 3D space (used as a direction)
type Spherical struct {
	// R is the Radius
	// Which is the distance from the origin
	R float32 `protobuf:"fixed32,1,opt,name=R,proto3" json:"R,omitempty"`
	// T is Theta
	// Which is the horizontal rotation in radians [0,2pi)
	T float32 `protobuf:"fixed32,2,opt,name=T,proto3" json:"T,omitempty"`
	// P is Phi
	// Which is the vertical tilt in radians [pi/2,pi/2]
	P                    float32  `protobuf:"fixed32,3,opt,name=P,proto3" json:"P,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Spherical) Reset()         { *m = Spherical{} }
func (m *Spherical) String() string { return proto.CompactTextString(m) }
func (*Spherical) ProtoMessage()    {}
func (*Spherical) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{8}
}

func (m *Spherical) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spherical.Unmarshal(m, b)
}
func (m *Spherical) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spherical.Marshal(b, m, deterministic)
}
func (m *Spherical) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spherical.Merge(m, src)
}
func (m *Spherical) XXX_Size() int {
	return xxx_messageInfo_Spherical.Size(m)
}
func (m *Spherical) XXX_DiscardUnknown() {
	xxx_messageInfo_Spherical.DiscardUnknown(m)
}

var xxx_messageInfo_Spherical proto.InternalMessageInfo

func (m *Spherical) GetR() float32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Spherical) GetT() float32 {
	if m != nil {
		return m.T
	}
	return 0
}

func (m *Spherical) GetP() float32 {
	if m != nil {
		return m.P
	}
	return 0
}

// Cartesian represents a location in 3D space
type Cartesian struct {
	// Theta is the X cooridnate in meters
	X float32 `protobuf:"fixed32,1,opt,name=X,proto3" json:"X,omitempty"`
	// Theta is the Y cooridnate in meters
	Y float32 `protobuf:"fixed32,2,opt,name=Y,proto3" json:"Y,omitempty"`
	// Theta is the Z cooridnate in meters
	Z                    float32  `protobuf:"fixed32,3,opt,name=Z,proto3" json:"Z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cartesian) Reset()         { *m = Cartesian{} }
func (m *Cartesian) String() string { return proto.CompactTextString(m) }
func (*Cartesian) ProtoMessage()    {}
func (*Cartesian) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{9}
}

func (m *Cartesian) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cartesian.Unmarshal(m, b)
}
func (m *Cartesian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cartesian.Marshal(b, m, deterministic)
}
func (m *Cartesian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cartesian.Merge(m, src)
}
func (m *Cartesian) XXX_Size() int {
	return xxx_messageInfo_Cartesian.Size(m)
}
func (m *Cartesian) XXX_DiscardUnknown() {
	xxx_messageInfo_Cartesian.DiscardUnknown(m)
}

var xxx_messageInfo_Cartesian proto.InternalMessageInfo

func (m *Cartesian) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Cartesian) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Cartesian) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

// Empty is empty, Duh.
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbf07d87724a611, []int{10}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SubscribeLightsRequest)(nil), "grpcdomain.SubscribeLightsRequest")
	proto.RegisterType((*SubscribeLightsReply)(nil), "grpcdomain.SubscribeLightsReply")
	proto.RegisterType((*GetDevicesReply)(nil), "grpcdomain.GetDevicesReply")
	proto.RegisterType((*MoveDeviceRequest)(nil), "grpcdomain.MoveDeviceRequest")
	proto.RegisterType((*InsertNodeRequest)(nil), "grpcdomain.InsertNodeRequest")
	proto.RegisterType((*DeleteNodeRequest)(nil), "grpcdomain.DeleteNodeRequest")
	proto.RegisterType((*Node)(nil), "grpcdomain.Node")
	proto.RegisterType((*Device)(nil), "grpcdomain.Device")
	proto.RegisterType((*Spherical)(nil), "grpcdomain.Spherical")
	proto.RegisterType((*Cartesian)(nil), "grpcdomain.Cartesian")
	proto.RegisterType((*Empty)(nil), "grpcdomain.Empty")
}

func init() { proto.RegisterFile("light_orchestrator.proto", fileDescriptor_6dbf07d87724a611) }

var fileDescriptor_6dbf07d87724a611 = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5b, 0x6f, 0xd3, 0x4c,
	0x10, 0xad, 0xdd, 0x26, 0x6d, 0x26, 0xdf, 0x47, 0xc9, 0x0a, 0x2a, 0x2b, 0xdc, 0x22, 0x3f, 0xa0,
	0x0a, 0x55, 0x2e, 0x04, 0x21, 0x78, 0x40, 0x50, 0x29, 0x41, 0xa8, 0x52, 0xa1, 0x61, 0xeb, 0x4a,
	0x6d, 0x41, 0x42, 0x8e, 0x33, 0x24, 0x2b, 0x39, 0x5e, 0xb3, 0xde, 0x54, 0xf2, 0x1f, 0x87, 0x57,
	0xb4, 0xeb, 0x6b, 0xe2, 0xb4, 0xe2, 0x81, 0x37, 0xcf, 0xcc, 0x39, 0x67, 0x2e, 0xf6, 0x31, 0x58,
	0x01, 0x9b, 0xce, 0xe4, 0x77, 0x2e, 0xfc, 0x19, 0xc6, 0x52, 0x78, 0x92, 0x0b, 0x27, 0x12, 0x5c,
	0x72, 0x02, 0x53, 0x11, 0xf9, 0x13, 0x3e, 0xf7, 0x58, 0xd8, 0x7d, 0x32, 0xe5, 0x7c, 0x1a, 0xe0,
	0xa1, 0xae, 0x8c, 0x17, 0x3f, 0x0e, 0x25, 0x9b, 0x63, 0x2c, 0xbd, 0x79, 0x94, 0x82, 0xed, 0x23,
	0xd8, 0x3b, 0x5b, 0x8c, 0x63, 0x5f, 0xb0, 0x31, 0x9e, 0x28, 0xc5, 0x98, 0xe2, 0xcf, 0x05, 0xc6,
	0x92, 0x10, 0xd8, 0x72, 0x93, 0x08, 0x2d, 0xa3, 0x67, 0xec, 0xb7, 0xa8, 0x7e, 0x56, 0xb9, 0xf3,
	0xf3, 0xe3, 0xa1, 0x65, 0xa6, 0x39, 0xf5, 0x6c, 0x07, 0x70, 0xaf, 0xa6, 0x10, 0x05, 0x09, 0x79,
	0x0b, 0xed, 0x21, 0x8b, 0xa3, 0xc0, 0x4b, 0x5c, 0x36, 0x4f, 0x65, 0xda, 0xfd, 0xae, 0x93, 0x0e,
	0xe4, 0xe4, 0x03, 0x39, 0x6e, 0x3e, 0x10, 0xad, 0xc2, 0xc9, 0x1e, 0x34, 0x07, 0x3c, 0xe0, 0x22,
	0xb6, 0xcc, 0xde, 0xe6, 0xfe, 0xff, 0x34, 0x8b, 0xec, 0x04, 0x76, 0x3f, 0xa2, 0x1c, 0xe2, 0x35,
	0xf3, 0x31, 0x6b, 0xf4, 0x06, 0xee, 0xa4, 0xf1, 0x67, 0x3e, 0x41, 0x57, 0x60, 0xde, 0xeb, 0xae,
	0x53, 0x1e, 0xc2, 0x51, 0x35, 0xba, 0x82, 0x23, 0x07, 0xb0, 0x9d, 0x29, 0xe9, 0x2e, 0xed, 0x3e,
	0xa9, 0x52, 0xd2, 0x12, 0xcd, 0x21, 0xf6, 0x7b, 0xe8, 0x7c, 0xe2, 0xd7, 0x98, 0xa5, 0xb3, 0x2b,
	0x3d, 0x83, 0x66, 0x9a, 0xc8, 0x9a, 0xae, 0x53, 0xc8, 0x10, 0xf6, 0x17, 0xe8, 0x1c, 0x87, 0x31,
	0x0a, 0xa9, 0x87, 0xc9, 0x04, 0x1e, 0x03, 0x8c, 0x3c, 0x81, 0xa1, 0xd4, 0x87, 0x4d, 0x8f, 0x5d,
	0xc9, 0x90, 0x87, 0xd0, 0x1a, 0xcc, 0x58, 0x30, 0xa9, 0xdc, 0xbd, 0x4c, 0x28, 0xc9, 0x21, 0x06,
	0x28, 0xf1, 0xdf, 0x49, 0x7e, 0x83, 0x2d, 0x25, 0x56, 0xbc, 0x6b, 0xa3, 0x7c, 0xd7, 0xc5, 0x37,
	0x61, 0x56, 0xbe, 0x89, 0x03, 0xd8, 0xd1, 0x64, 0x81, 0xa1, 0xb5, 0xa9, 0xaf, 0x58, 0x3f, 0x7c,
	0x81, 0xb0, 0x7f, 0x1b, 0xf9, 0xc1, 0xfe, 0xba, 0xc1, 0x0b, 0xd8, 0x39, 0xe1, 0xbe, 0x27, 0x19,
	0x57, 0x0d, 0xd4, 0x91, 0xef, 0x57, 0x1b, 0x0c, 0x3c, 0x21, 0x31, 0x66, 0x5e, 0x48, 0x0b, 0x18,
	0x79, 0x0d, 0xed, 0x53, 0xc1, 0x30, 0x94, 0x29, 0x6b, 0xab, 0xce, 0x3a, 0x8b, 0x66, 0x28, 0x98,
	0xef, 0x05, 0xb4, 0x8a, 0x54, 0xbd, 0x28, 0xcf, 0x58, 0x8d, 0xdb, 0x58, 0x05, 0x8c, 0x3c, 0x85,
	0x86, 0xda, 0x31, 0xb6, 0x9a, 0x37, 0x2c, 0x9f, 0x96, 0xed, 0x57, 0xd0, 0x2a, 0xe8, 0xe4, 0x3f,
	0x30, 0xa8, 0x5e, 0xdc, 0xa4, 0x06, 0x55, 0x91, 0xab, 0x57, 0x36, 0xa9, 0xe1, 0xaa, 0x68, 0xa4,
	0x17, 0x35, 0xa9, 0x31, 0x52, 0xb4, 0x62, 0x43, 0x55, 0xba, 0xc8, 0x69, 0x17, 0x2a, 0xba, 0xcc,
	0x69, 0x97, 0x2a, 0xba, 0xca, 0x69, 0x57, 0xf6, 0x36, 0x34, 0x3e, 0xcc, 0x23, 0x99, 0xf4, 0x7f,
	0x99, 0xd0, 0xd1, 0xb6, 0x3c, 0xad, 0xfc, 0x29, 0xc8, 0x57, 0xd8, 0x5d, 0x31, 0x2d, 0xb1, 0x97,
	0x16, 0x5d, 0xfb, 0x4f, 0xe8, 0xf6, 0x6e, 0xc5, 0x44, 0x41, 0x62, 0x6f, 0x3c, 0x37, 0xc8, 0x3b,
	0x80, 0xd2, 0xa3, 0xa4, 0x53, 0xe5, 0xe8, 0x99, 0xba, 0x0f, 0xaa, 0xa9, 0x15, 0x3b, 0xdb, 0x1b,
	0xe4, 0x08, 0xa0, 0x34, 0x1a, 0x79, 0x54, 0x05, 0xd7, 0x0c, 0xd8, 0xad, 0xcb, 0xa7, 0x0a, 0xa5,
	0xd3, 0x96, 0x15, 0x6a, 0x0e, 0xbc, 0x51, 0xa1, 0x34, 0xd6, 0xb2, 0x42, 0xcd, 0x70, 0x6b, 0x15,
	0xc6, 0x4d, 0xfd, 0x8b, 0x7b, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x87, 0xe2, 0x99, 0xa9,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LightOrchestratorClient is the client API for LightOrchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LightOrchestratorClient interface {
	// SubscribeLights requests a stream of lights
	SubscribeLights(ctx context.Context, in *SubscribeLightsRequest, opts ...grpc.CallOption) (LightOrchestrator_SubscribeLightsClient, error)
	// GetDevices returns the DeviceNode hierarchy and all subscribed devices
	GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDevicesReply, error)
	// MoveDevice changes a devices location and orientation
	MoveDevice(ctx context.Context, in *MoveDeviceRequest, opts ...grpc.CallOption) (*Empty, error)
	// InsertNode inserts a node into the vibe hierarchy
	InsertNode(ctx context.Context, in *InsertNodeRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeleteNode deletes a node from the vibe hierarchy
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type lightOrchestratorClient struct {
	cc *grpc.ClientConn
}

func NewLightOrchestratorClient(cc *grpc.ClientConn) LightOrchestratorClient {
	return &lightOrchestratorClient{cc}
}

func (c *lightOrchestratorClient) SubscribeLights(ctx context.Context, in *SubscribeLightsRequest, opts ...grpc.CallOption) (LightOrchestrator_SubscribeLightsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LightOrchestrator_serviceDesc.Streams[0], "/grpcdomain.LightOrchestrator/SubscribeLights", opts...)
	if err != nil {
		return nil, err
	}
	x := &lightOrchestratorSubscribeLightsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LightOrchestrator_SubscribeLightsClient interface {
	Recv() (*SubscribeLightsReply, error)
	grpc.ClientStream
}

type lightOrchestratorSubscribeLightsClient struct {
	grpc.ClientStream
}

func (x *lightOrchestratorSubscribeLightsClient) Recv() (*SubscribeLightsReply, error) {
	m := new(SubscribeLightsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lightOrchestratorClient) GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDevicesReply, error) {
	out := new(GetDevicesReply)
	err := c.cc.Invoke(ctx, "/grpcdomain.LightOrchestrator/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightOrchestratorClient) MoveDevice(ctx context.Context, in *MoveDeviceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpcdomain.LightOrchestrator/MoveDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightOrchestratorClient) InsertNode(ctx context.Context, in *InsertNodeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpcdomain.LightOrchestrator/InsertNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightOrchestratorClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpcdomain.LightOrchestrator/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightOrchestratorServer is the server API for LightOrchestrator service.
type LightOrchestratorServer interface {
	// SubscribeLights requests a stream of lights
	SubscribeLights(*SubscribeLightsRequest, LightOrchestrator_SubscribeLightsServer) error
	// GetDevices returns the DeviceNode hierarchy and all subscribed devices
	GetDevices(context.Context, *Empty) (*GetDevicesReply, error)
	// MoveDevice changes a devices location and orientation
	MoveDevice(context.Context, *MoveDeviceRequest) (*Empty, error)
	// InsertNode inserts a node into the vibe hierarchy
	InsertNode(context.Context, *InsertNodeRequest) (*Empty, error)
	// DeleteNode deletes a node from the vibe hierarchy
	DeleteNode(context.Context, *DeleteNodeRequest) (*Empty, error)
}

// UnimplementedLightOrchestratorServer can be embedded to have forward compatible implementations.
type UnimplementedLightOrchestratorServer struct {
}

func (*UnimplementedLightOrchestratorServer) SubscribeLights(req *SubscribeLightsRequest, srv LightOrchestrator_SubscribeLightsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLights not implemented")
}
func (*UnimplementedLightOrchestratorServer) GetDevices(ctx context.Context, req *Empty) (*GetDevicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (*UnimplementedLightOrchestratorServer) MoveDevice(ctx context.Context, req *MoveDeviceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveDevice not implemented")
}
func (*UnimplementedLightOrchestratorServer) InsertNode(ctx context.Context, req *InsertNodeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNode not implemented")
}
func (*UnimplementedLightOrchestratorServer) DeleteNode(ctx context.Context, req *DeleteNodeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}

func RegisterLightOrchestratorServer(s *grpc.Server, srv LightOrchestratorServer) {
	s.RegisterService(&_LightOrchestrator_serviceDesc, srv)
}

func _LightOrchestrator_SubscribeLights_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLightsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LightOrchestratorServer).SubscribeLights(m, &lightOrchestratorSubscribeLightsServer{stream})
}

type LightOrchestrator_SubscribeLightsServer interface {
	Send(*SubscribeLightsReply) error
	grpc.ServerStream
}

type lightOrchestratorSubscribeLightsServer struct {
	grpc.ServerStream
}

func (x *lightOrchestratorSubscribeLightsServer) Send(m *SubscribeLightsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _LightOrchestrator_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightOrchestratorServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.LightOrchestrator/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightOrchestratorServer).GetDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightOrchestrator_MoveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightOrchestratorServer).MoveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.LightOrchestrator/MoveDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightOrchestratorServer).MoveDevice(ctx, req.(*MoveDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightOrchestrator_InsertNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightOrchestratorServer).InsertNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.LightOrchestrator/InsertNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightOrchestratorServer).InsertNode(ctx, req.(*InsertNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightOrchestrator_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightOrchestratorServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdomain.LightOrchestrator/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightOrchestratorServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LightOrchestrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdomain.LightOrchestrator",
	HandlerType: (*LightOrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _LightOrchestrator_GetDevices_Handler,
		},
		{
			MethodName: "MoveDevice",
			Handler:    _LightOrchestrator_MoveDevice_Handler,
		},
		{
			MethodName: "InsertNode",
			Handler:    _LightOrchestrator_InsertNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _LightOrchestrator_DeleteNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeLights",
			Handler:       _LightOrchestrator_SubscribeLights_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "light_orchestrator.proto",
}
