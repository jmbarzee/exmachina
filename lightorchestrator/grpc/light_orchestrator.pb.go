// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: light_orchestrator.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SubscribeLightsRequest contains the identifying information from the subscriber
type SubscribeLightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the Type of the Subscriber
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// ID is a Unique Identifier for the Subscriber
	ID []byte `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *SubscribeLightsRequest) Reset() {
	*x = SubscribeLightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLightsRequest) ProtoMessage() {}

func (x *SubscribeLightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLightsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLightsRequest) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeLightsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SubscribeLightsRequest) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

// SubscribeLightsReply contains the time and series of RGBA colors which should be displayed
type SubscribeLightsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DisplayTime is the time which the lights should be applied
	DisplayTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=DisplayTime,proto3" json:"DisplayTime,omitempty"`
	// Colors are the series of colors which should be displayed
	Colors []uint32 `protobuf:"varint,2,rep,packed,name=Colors,proto3" json:"Colors,omitempty"`
}

func (x *SubscribeLightsReply) Reset() {
	*x = SubscribeLightsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLightsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLightsReply) ProtoMessage() {}

func (x *SubscribeLightsReply) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLightsReply.ProtoReflect.Descriptor instead.
func (*SubscribeLightsReply) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeLightsReply) GetDisplayTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DisplayTime
	}
	return nil
}

func (x *SubscribeLightsReply) GetColors() []uint32 {
	if x != nil {
		return x.Colors
	}
	return nil
}

// GetDevicesReply contains the DeviceNode hierarchy and all subscribed devices
type GetDevicesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeviceNodeTree is DeviceNode hierarchy
	DeviceNodeTree *Node `protobuf:"bytes,1,opt,name=DeviceNodeTree,proto3" json:"DeviceNodeTree,omitempty"`
	// Devices is the list of subscribed devices
	Devices []*Device `protobuf:"bytes,2,rep,name=Devices,proto3" json:"Devices,omitempty"`
}

func (x *GetDevicesReply) Reset() {
	*x = GetDevicesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesReply) ProtoMessage() {}

func (x *GetDevicesReply) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesReply.ProtoReflect.Descriptor instead.
func (*GetDevicesReply) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{2}
}

func (x *GetDevicesReply) GetDeviceNodeTree() *Node {
	if x != nil {
		return x.DeviceNodeTree
	}
	return nil
}

func (x *GetDevicesReply) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

// MoveDeviceRequest contains the new position and orientation
type MoveDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device contians the ID and type of the device to help find the device to move
	// the Location and Orientation are where the device should be moved to
	Device *Device `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
}

func (x *MoveDeviceRequest) Reset() {
	*x = MoveDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveDeviceRequest) ProtoMessage() {}

func (x *MoveDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveDeviceRequest.ProtoReflect.Descriptor instead.
func (*MoveDeviceRequest) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{3}
}

func (x *MoveDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// InsertNodeRequest contains the ID of the parent and the child
type InsertNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ParentID is the ID of the parent for the new child
	ParentID []byte `protobuf:"bytes,1,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	// ChildID is the IIDD of the new child
	ChildID []byte `protobuf:"bytes,2,opt,name=ChildID,proto3" json:"ChildID,omitempty"`
}

func (x *InsertNodeRequest) Reset() {
	*x = InsertNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertNodeRequest) ProtoMessage() {}

func (x *InsertNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertNodeRequest.ProtoReflect.Descriptor instead.
func (*InsertNodeRequest) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{4}
}

func (x *InsertNodeRequest) GetParentID() []byte {
	if x != nil {
		return x.ParentID
	}
	return nil
}

func (x *InsertNodeRequest) GetChildID() []byte {
	if x != nil {
		return x.ChildID
	}
	return nil
}

// DeleteNodeRequest contains the ID of the parent and the child
type DeleteNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ParentID is the ID of the parent for the new child
	ParentID []byte `protobuf:"bytes,1,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	// ChildID is the ID of the new child
	ChildID []byte `protobuf:"bytes,2,opt,name=ChildID,proto3" json:"ChildID,omitempty"`
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteNodeRequest) GetParentID() []byte {
	if x != nil {
		return x.ParentID
	}
	return nil
}

func (x *DeleteNodeRequest) GetChildID() []byte {
	if x != nil {
		return x.ChildID
	}
	return nil
}

// DeviceNNodeode represents a Node in the Node hierarchy
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the ID of the Node
	ID []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Type is the Type of the Node
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Children are the Children of the Node
	Children []*Node `protobuf:"bytes,3,rep,name=Children,proto3" json:"Children,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{6}
}

func (x *Node) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Node) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Node) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

// Device represents a subscriber in the list of subscribers
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the ID of the Device
	ID []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Type is the Type of the Device
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Location is the Location of the Device
	Location *Cartesian `protobuf:"bytes,3,opt,name=Location,proto3" json:"Location,omitempty"`
	// Orientation is the Orientation of the Device
	Orientation *Spherical `protobuf:"bytes,4,opt,name=Orientation,proto3" json:"Orientation,omitempty"`
	// Rotation is the Rotation of the Device
	Rotation *Spherical `protobuf:"bytes,5,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	// Nodes is an array of the nodes which the
	Nodes []*Node `protobuf:"bytes,6,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{7}
}

func (x *Device) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Device) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Device) GetLocation() *Cartesian {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Device) GetOrientation() *Spherical {
	if x != nil {
		return x.Orientation
	}
	return nil
}

func (x *Device) GetRotation() *Spherical {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *Device) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Spherical represents a location in 3D space (used as a direction)
type Spherical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// R is the Radius
	// Which is the distance from the origin
	R float32 `protobuf:"fixed32,1,opt,name=R,proto3" json:"R,omitempty"`
	// T is Theta
	// Which is the horizontal rotation in radians [0,2pi)
	T float32 `protobuf:"fixed32,2,opt,name=T,proto3" json:"T,omitempty"`
	// P is Phi
	// Which is the vertical tilt in radians [pi/2,pi/2]
	P float32 `protobuf:"fixed32,3,opt,name=P,proto3" json:"P,omitempty"`
}

func (x *Spherical) Reset() {
	*x = Spherical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spherical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spherical) ProtoMessage() {}

func (x *Spherical) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spherical.ProtoReflect.Descriptor instead.
func (*Spherical) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{8}
}

func (x *Spherical) GetR() float32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *Spherical) GetT() float32 {
	if x != nil {
		return x.T
	}
	return 0
}

func (x *Spherical) GetP() float32 {
	if x != nil {
		return x.P
	}
	return 0
}

// Cartesian represents a location in 3D space
type Cartesian struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Theta is the X cooridnate in meters
	X float32 `protobuf:"fixed32,1,opt,name=X,proto3" json:"X,omitempty"`
	// Theta is the Y cooridnate in meters
	Y float32 `protobuf:"fixed32,2,opt,name=Y,proto3" json:"Y,omitempty"`
	// Theta is the Z cooridnate in meters
	Z float32 `protobuf:"fixed32,3,opt,name=Z,proto3" json:"Z,omitempty"`
}

func (x *Cartesian) Reset() {
	*x = Cartesian{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cartesian) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cartesian) ProtoMessage() {}

func (x *Cartesian) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cartesian.ProtoReflect.Descriptor instead.
func (*Cartesian) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{9}
}

func (x *Cartesian) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Cartesian) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Cartesian) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Empty is empty, Duh.
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_light_orchestrator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_light_orchestrator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_light_orchestrator_proto_rawDescGZIP(), []int{10}
}

var File_light_orchestrator_proto protoreflect.FileDescriptor

var file_light_orchestrator_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x72, 0x70, 0x63,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3c, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x6c, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x6d, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x32, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x11,
	0x4d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x22, 0x49, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22, 0x52, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73,
	0x69, 0x61, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x68, 0x65, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x68, 0x65, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x35, 0x0a, 0x09, 0x53, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x0c, 0x0a, 0x01,
	0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x52, 0x12, 0x0c, 0x0a, 0x01, 0x54, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x54, 0x12, 0x0c, 0x0a, 0x01, 0x50, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x50, 0x22, 0x35, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73,
	0x69, 0x61, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x59, 0x12,
	0x0c, 0x0a, 0x01, 0x5a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x5a, 0x22, 0x07, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xba, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x0f,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x32, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6a, 0x6d, 0x62, 0x61, 0x72, 0x7a, 0x65, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_light_orchestrator_proto_rawDescOnce sync.Once
	file_light_orchestrator_proto_rawDescData = file_light_orchestrator_proto_rawDesc
)

func file_light_orchestrator_proto_rawDescGZIP() []byte {
	file_light_orchestrator_proto_rawDescOnce.Do(func() {
		file_light_orchestrator_proto_rawDescData = protoimpl.X.CompressGZIP(file_light_orchestrator_proto_rawDescData)
	})
	return file_light_orchestrator_proto_rawDescData
}

var file_light_orchestrator_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_light_orchestrator_proto_goTypes = []interface{}{
	(*SubscribeLightsRequest)(nil), // 0: grpc.SubscribeLightsRequest
	(*SubscribeLightsReply)(nil),   // 1: grpc.SubscribeLightsReply
	(*GetDevicesReply)(nil),        // 2: grpc.GetDevicesReply
	(*MoveDeviceRequest)(nil),      // 3: grpc.MoveDeviceRequest
	(*InsertNodeRequest)(nil),      // 4: grpc.InsertNodeRequest
	(*DeleteNodeRequest)(nil),      // 5: grpc.DeleteNodeRequest
	(*Node)(nil),                   // 6: grpc.Node
	(*Device)(nil),                 // 7: grpc.Device
	(*Spherical)(nil),              // 8: grpc.Spherical
	(*Cartesian)(nil),              // 9: grpc.Cartesian
	(*Empty)(nil),                  // 10: grpc.Empty
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
}
var file_light_orchestrator_proto_depIdxs = []int32{
	11, // 0: grpc.SubscribeLightsReply.DisplayTime:type_name -> google.protobuf.Timestamp
	6,  // 1: grpc.GetDevicesReply.DeviceNodeTree:type_name -> grpc.Node
	7,  // 2: grpc.GetDevicesReply.Devices:type_name -> grpc.Device
	7,  // 3: grpc.MoveDeviceRequest.Device:type_name -> grpc.Device
	6,  // 4: grpc.Node.Children:type_name -> grpc.Node
	9,  // 5: grpc.Device.Location:type_name -> grpc.Cartesian
	8,  // 6: grpc.Device.Orientation:type_name -> grpc.Spherical
	8,  // 7: grpc.Device.Rotation:type_name -> grpc.Spherical
	6,  // 8: grpc.Device.Nodes:type_name -> grpc.Node
	0,  // 9: grpc.LightOrchestrator.SubscribeLights:input_type -> grpc.SubscribeLightsRequest
	10, // 10: grpc.LightOrchestrator.GetDevices:input_type -> grpc.Empty
	3,  // 11: grpc.LightOrchestrator.MoveDevice:input_type -> grpc.MoveDeviceRequest
	4,  // 12: grpc.LightOrchestrator.InsertNode:input_type -> grpc.InsertNodeRequest
	5,  // 13: grpc.LightOrchestrator.DeleteNode:input_type -> grpc.DeleteNodeRequest
	1,  // 14: grpc.LightOrchestrator.SubscribeLights:output_type -> grpc.SubscribeLightsReply
	2,  // 15: grpc.LightOrchestrator.GetDevices:output_type -> grpc.GetDevicesReply
	10, // 16: grpc.LightOrchestrator.MoveDevice:output_type -> grpc.Empty
	10, // 17: grpc.LightOrchestrator.InsertNode:output_type -> grpc.Empty
	10, // 18: grpc.LightOrchestrator.DeleteNode:output_type -> grpc.Empty
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_light_orchestrator_proto_init() }
func file_light_orchestrator_proto_init() {
	if File_light_orchestrator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_light_orchestrator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLightsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevicesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spherical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cartesian); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_light_orchestrator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_light_orchestrator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_light_orchestrator_proto_goTypes,
		DependencyIndexes: file_light_orchestrator_proto_depIdxs,
		MessageInfos:      file_light_orchestrator_proto_msgTypes,
	}.Build()
	File_light_orchestrator_proto = out.File
	file_light_orchestrator_proto_rawDesc = nil
	file_light_orchestrator_proto_goTypes = nil
	file_light_orchestrator_proto_depIdxs = nil
}
