syntax = "proto3";

package grpc;

option go_package = "github.com/jmbarzee/services/lightorchestrator/grpc";
import "google/protobuf/timestamp.proto";

service LightOrchestrator {
	// SubscribeLights requests a stream of lights
	rpc SubscribeLights(SubscribeLightsRequest) returns (stream SubscribeLightsReply) {}

	// GetDevices returns the DeviceNode hierarchy and all subscribed devices
	rpc GetDevices(Empty) returns (GetDevicesReply) {}

	// MoveDevice changes a devices location and orientation 
	rpc MoveDevice(MoveDeviceRequest) returns (Empty) {}

	// InsertNode inserts a node into the NodeTree
	rpc InsertNode(InsertNodeRequest) returns (Empty) {}

	// DeleteNode deletes a node from the NodeTree
	rpc DeleteNode(DeleteNodeRequest) returns (Empty) {}
}


// SubscribeLightsRequest contains the identifying information from the subscriber
message SubscribeLightsRequest {
	// Type is the Type of the Subscriber
	string Type = 1;
	// ID is a Unique Identifier for the Subscriber
	bytes ID = 2;

} 

// SubscribeLightsReply contains the time and series of RGBA colors which should be displayed
message SubscribeLightsReply {
	// DisplayTime is the time which the lights should be applied
	google.protobuf.Timestamp DisplayTime = 1;

	// Colors are the series of colors which should be displayed
	repeated uint32 Colors = 2;
} 


// GetDevicesReply contains the DeviceNode hierarchy and all subscribed devices
message GetDevicesReply {
	// DeviceNodeTree is DeviceNode hierarchy
	Node DeviceNodeTree = 1;

	// Devices is the list of subscribed devices
	repeated Device Devices = 2;
} 


// MoveDeviceRequest contains the new position and orientation 
message MoveDeviceRequest {
	// Device contians the ID and type of the device to help find the device to move
	// the Location and Orientation are where the device should be moved to
	Device Device = 1;
} 


// InsertNodeRequest contains the ID of the parent and the child
message InsertNodeRequest {
	// ParentID is the ID of the parent for the new child
	bytes ParentID = 1;

	// ChildID is the IIDD of the new child 
	bytes ChildID = 2;
} 

// DeleteNodeRequest contains the ID of the parent and the child
message DeleteNodeRequest {
	// ParentID is the ID of the parent for the new child
	bytes ParentID = 1;

	// ChildID is the ID of the new child 
	bytes ChildID = 2;
} 

// DeviceNNodeode represents a Node in the Node hierarchy
message Node {
	// ID is the ID of the Node
	bytes ID = 1;

	// Type is the Type of the Node
	string Type = 2;

	// Children are the Children of the Node
	repeated Node Children = 3;
}

// Device represents a subscriber in the list of subscribers
message Device {
	// ID is the ID of the Device
	bytes ID = 1;

	// Type is the Type of the Device
	string Type = 2;

	// Location is the Location of the Device
	Cartesian Location = 3;

	// Orientation is the Orientation of the Device
	Spherical Orientation = 4;

	// Rotation is the Rotation of the Device
	Spherical Rotation = 5;

	// Nodes is an array of the nodes which the 
	repeated Node Nodes = 6;
}

// Spherical represents a location in 3D space (used as a direction)
message Spherical {
	// R is the Radius
	// Which is the distance from the origin
	float R = 1;

	// T is Theta
	// Which is the horizontal rotation in radians [0,2pi)
	float T = 2;

	// P is Phi
	// Which is the vertical tilt in radians [pi/2,pi/2]
	float P = 3;
}

// Cartesian represents a location in 3D space
message Cartesian {
	// Theta is the X cooridnate in meters 
	float X = 1;
	// Theta is the Y cooridnate in meters 
	float Y = 2;
	// Theta is the Z cooridnate in meters 
	float Z = 3;
}

// Empty is empty, Duh.
message Empty {
}